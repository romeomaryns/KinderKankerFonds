yum upgrade 
adduser kinderkankerfonds
passwd kinderkankerfonds
sudo yum install postgresql-server postgresql-contrib 
sudo postgresql-setup initdb
sudo yum install nano 
sudo nano /var/lib/pgsql/data/pg_hba.conf
     ident => md5
sudo systemctl start postgresql
sudo systemctl enable postgresql
sudo -i -u postgres
createuser --interactive
sudo -u postgres psql
    \password kinderkankerfonds
    \password postgres
    \q
createdb kinderkankerfonds
sudo nano /etc/sysconfig/selinux
   disabled
sudo firewall-cmd --permanent --add-port=5432/tcp
sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --reload

sudo nano /var/lib/pgsql/data/postgresql.conf
  => listen address en port uncomment

 sudo systemctl restart postgresql

.\gradlew clean buildUberJar
=> sftp kkf.jar naar home folder
 java -jar kkf.jar

iptables -F

sudo tcpdump -ani enp0s3 port 5432 -vv



backup => https://www.digitalocean.com/community/tutorials/how-to-backup-postgresql-databases-on-an-ubuntu-vps


 ssh -L 8080:vkkfadresp:8080 kkfadres_SUP_prd@vkkfadresp.internal.uzgent.be
 

production build :   gradlew buildUberJar


java -jar .\build\distributions\uberJar\kkf.jar


kinderkankerfonds

account: kkfadres_SUP_prd
pass: c4Q2jnu5UFMA




BACKUPS :


crontab
# CRON table for postgres user.


# run backup every night at 22:00 hours (10PM)
0 22 * * * /var/lib/pgsql/backups/backup.sh kinderkankerfonds

# run backup every week at midnight hour on sunday
0 0 * * 0 /var/lib/pgsql/backups/backup.sh



backup.sh

#!/bin/bash
# This script will backup the postgresql database
# and store it in a specified directory

# PARAMETERS
# $1 database name (if none specified run pg_dumpall)

# CONSTANTS
# postgres home folder backups directory
# !! DO NOT specify trailing '/' as it is included below for readability !!
BACKUP_DIRECTORY="/var/lib/pgsql/backups"

# Date stamp (formated YYYYMMDD)
# just used in file name
CURRENT_DATE=$(date "+%Y%m%d")

# !!! Important pg_dump command does not export users/groups tables
# still need to maintain a pg_dumpall for full disaster recovery !!!

# this checks to see if the first command line argument is null
if [ -z "$1" ]
then
# No database specified, do a full backup using pg_dumpall
pg_dumpall | gzip - > $BACKUP_DIRECTORY/pg_dumpall_$CURRENT_DATE.sql.gz

else
# Database named (command line argument) use pg_dump for targed backup
pg_dump $1 | gzip - > $BACKUP_DIRECTORY/$1_$CURRENT_DATE.sql.gz

fi